"use strict";(self.webpackChunkjeongyong_park_github_io=self.webpackChunkjeongyong_park_github_io||[]).push([[7214],{6840:e=>{e.exports=JSON.parse('{"permalink":"/blog/csharp-thread-parallel-foreach-cancellation","source":"@site/blog/2017-01-09-post/index.md","title":"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법","description":"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법","date":"2017-01-09T00:00:00.000Z","tags":[{"inline":true,"label":"dotnet","permalink":"/blog/tags/dotnet"},{"inline":true,"label":"csharp","permalink":"/blog/tags/csharp"},{"inline":true,"label":"threading","permalink":"/blog/tags/threading"},{"inline":true,"label":"parallel","permalink":"/blog/tags/parallel"}],"readingTime":1.91,"hasTruncateMarker":true,"authors":[{"name":"Jeongyong Park","title":"쌍팔년생 개발자","url":"https://github.com/jeongyong-park","email":"kladess@gmail.com","socials":{"x":"https://x.com/chisquare88","github":"https://github.com/jeongyong-park"},"imageURL":"/img/avatar.webp","key":"jypark","page":null}],"frontMatter":{"title":"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법","date":"2017-01-09","description":"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법","authors":["jypark"],"tags":["dotnet","csharp","threading","parallel"],"image":"csharp.png","slug":"csharp-thread-parallel-foreach-cancellation","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Docker로 GDAL 간편하게 사용하기","permalink":"/blog/docker-gdal-geospatial-data-processing"}}')},7214:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var r=t(6840),n=t(4848),l=t(8453);const o={title:"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법",date:"2017-01-09",description:"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법",authors:["jypark"],tags:["dotnet","csharp","threading","parallel"],image:"csharp.png",slug:"csharp-thread-parallel-foreach-cancellation",hide_table_of_contents:!1},s=void 0,i={authorsImageUrls:[void 0]},c=[];function p(e){const a={blockquote:"blockquote",p:"p",strong:"strong",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.p,{children:"GUI 환경에서 버튼을 클릭하는 등의 이벤트로 시간이 오래 걸리는 작업을 구동하는 경우 스레드를 분리하여 개발하는 방법이 좋다는 방법은 C# 뿐만 아니라 안드로이드나 MFC 등 GUI를 어느 정도 개발한 사람이라면 익숙하리라 생각한다."}),"\n",(0,n.jsx)(a.p,{children:"그렇다면 그 시간이 오래 걸리는 작업을 더욱더 빠르게 하고 싶다면 병렬 처리가 가장 쉽고 빨리 적용할 수 있는 합리적인 방법이라고 생각한다."}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.strong,{children:"TL;DR"}),": Thread.Abort()는 위험하므로 사용하지 마세요."]}),"\n"]})]})}function h(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>s});var r=t(6540);const n={},l=r.createContext(n);function o(e){const a=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(l.Provider,{value:a},e.children)}}}]);