"use strict";(self.webpackChunkjeongyong_park_github_io=self.webpackChunkjeongyong_park_github_io||[]).push([[5571],{138:n=>{n.exports=JSON.parse('{"permalink":"/blog/next-yak-nextjs-css-in-js","source":"@site/blog/2025-05-26-post-2/index.md","title":"next-yak: Next.js를 위한 러스트 기반 Zero-runtime CSS-in-JS","description":"Next.js 프로젝트에서 사용할 수 있는 고성능 Zero-runtime CSS-in-JS 라이브러리 next-yak의 특징과 성능 최적화 방법을 소개합니다.","date":"2025-05-26T00:00:00.000Z","tags":[{"inline":true,"label":"nextjs","permalink":"/blog/tags/nextjs"},{"inline":true,"label":"next-yak","permalink":"/blog/tags/next-yak"},{"inline":true,"label":"css-in-js","permalink":"/blog/tags/css-in-js"},{"inline":true,"label":"performance","permalink":"/blog/tags/performance"},{"inline":true,"label":"frontend","permalink":"/blog/tags/frontend"}],"readingTime":5.38,"hasTruncateMarker":true,"authors":[{"name":"Jeongyong Park","title":"쌍팔년생 개발자","url":"https://github.com/jeongyong-park","email":"kladess@gmail.com","socials":{"x":"https://x.com/chisquare88","github":"https://github.com/jeongyong-park"},"imageURL":"/img/avatar.webp","key":"jypark","page":null}],"frontMatter":{"slug":"next-yak-nextjs-css-in-js","title":"next-yak: Next.js를 위한 러스트 기반 Zero-runtime CSS-in-JS","date":"2025-05-26","authors":["jypark"],"image":"yak-jumping.webp","tags":["nextjs","next-yak","css-in-js","performance","frontend"],"description":"Next.js 프로젝트에서 사용할 수 있는 고성능 Zero-runtime CSS-in-JS 라이브러리 next-yak의 특징과 성능 최적화 방법을 소개합니다."},"unlisted":false,"prevItem":{"title":"PostgreSQL 18에 UUIDv7이 도입됩니다","permalink":"/blog/uuidv7-postgresql-18"},"nextItem":{"title":"OKLCH 색상 공간: 웹 디자인의 새로운 표준","permalink":"/blog/oklch-color-space-web-design"}}')},1829:(n,e,t)=>{t.d(e,{A:()=>s});const s=t.p+"assets/images/yak-jumping-e652f322e95859f8526a7ebd4bd2a519.webp"},5571:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>a});var s=t(138),r=t(4848),i=t(8453);const l={slug:"next-yak-nextjs-css-in-js",title:"next-yak: Next.js를 위한 러스트 기반 Zero-runtime CSS-in-JS",date:"2025-05-26",authors:["jypark"],image:"yak-jumping.webp",tags:["nextjs","next-yak","css-in-js","performance","frontend"],description:"Next.js 프로젝트에서 사용할 수 있는 고성능 Zero-runtime CSS-in-JS 라이브러리 next-yak의 특징과 성능 최적화 방법을 소개합니다."},o="next-yak)",d={authorsImageUrls:[void 0]},a=[{value:"next-yak가 해결하는 문제",id:"next-yak가-해결하는-문제",level:2},{value:"핵심 특징",id:"핵심-특징",level:2},{value:"1. Zero-runtime 아키텍처",id:"1-zero-runtime-아키텍처",level:3},{value:"2. React Server Components 완벽 지원",id:"2-react-server-components-완벽-지원",level:3},{value:"3. 동적 스타일링 최적화",id:"3-동적-스타일링-최적화",level:3},{value:"설치 및 설정",id:"설치-및-설정",level:2},{value:"패키지 설치",id:"패키지-설치",level:3},{value:"Next.js 설정",id:"nextjs-설정",level:3},{value:"TypeScript 설정",id:"typescript-설정",level:3},{value:"실무 활용 패턴",id:"실무-활용-패턴",level:2},{value:"1. 컴포넌트 시스템 구축",id:"1-컴포넌트-시스템-구축",level:3},{value:"2. 반응형 레이아웃",id:"2-반응형-레이아웃",level:3},{value:"성능 최적화",id:"성능-최적화",level:2},{value:"빌드 설정 최적화",id:"빌드-설정-최적화",level:3},{value:"성능 측정 결과",id:"성능-측정-결과",level:3},{value:"마이그레이션 가이드",id:"마이그레이션-가이드",level:2},{value:"styled-components에서 마이그레이션",id:"styled-components에서-마이그레이션",level:3},{value:"점진적 마이그레이션 전략",id:"점진적-마이그레이션-전략",level:3},{value:"트러블슈팅",id:"트러블슈팅",level:2},{value:"자주 발생하는 문제",id:"자주-발생하는-문제",level:3},{value:"결론",id:"결론",level:2},{value:"참고 자료",id:"참고-자료",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"CSS-in-JS는 현대 React 개발에서 널리 사용되지만, 런타임 성능 문제가 항상 고민거리였습니다. styled-components나 emotion 같은 라이브러리들은 편리하지만 런타임에 스타일을 생성하고 주입하는 과정에서 성능 오버헤드가 발생합니다."}),"\n",(0,r.jsxs)(e.p,{children:["next-yak는 이러한 문제를 해결하기 위해 탄생한 혁신적인 CSS-in-JS 라이브러리입니다. 러스트로 개발된 이 라이브러리는 빌드 타임에 CSS를 추출하여 런타임 JavaScript 오버헤드를 완전히 제거합니다.\n",(0,r.jsx)(e.img,{alt:"next-yak",src:t(1829).A+"",width:"673",height:"512"})]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"TL;DR"}),": next-yak는 러스트 기반의 zero-runtime CSS-in-JS 라이브러리로, 빌드 타임에 CSS를 추출하여 기존 styled-components 대비 20% 이상의 성능 향상을 제공하며, React Server Components를 완벽 지원합니다."]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"이 글에서 다룰 내용:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"next-yak의 Zero-runtime 아키텍처와 성능 이점"}),"\n",(0,r.jsx)(e.li,{children:"Next.js 프로젝트에서의 설치 및 설정 방법"}),"\n",(0,r.jsx)(e.li,{children:"React Server Components와의 완벽한 호환성"}),"\n",(0,r.jsx)(e.li,{children:"실제 프로젝트에서 활용할 수 있는 핵심 패턴들"}),"\n",(0,r.jsx)(e.li,{children:"기존 CSS-in-JS 라이브러리에서의 마이그레이션 전략"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-yak가-해결하는-문제",children:"next-yak가 해결하는 문제"}),"\n",(0,r.jsx)(e.p,{children:"기존 CSS-in-JS 라이브러리들의 주요 문제점:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"런타임 성능 오버헤드"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"스타일 생성과 주입이 런타임에 발생"}),"\n",(0,r.jsx)(e.li,{children:"JavaScript 번들 크기 증가 (styled-components: ~40KB)"}),"\n",(0,r.jsx)(e.li,{children:"초기 렌더링 지연과 hydration 성능 저하"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Server-Side Rendering 복잡성"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"서버와 클라이언트 간 스타일 동기화 문제"}),"\n",(0,r.jsx)(e.li,{children:"추가적인 설정과 보일러플레이트 코드 필요"}),"\n",(0,r.jsx)(e.li,{children:"React Server Components와의 제한적 호환성"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"next-yak는 이러한 문제들을 빌드 타임 CSS 추출을 통해 근본적으로 해결합니다."}),"\n",(0,r.jsx)(e.h2,{id:"핵심-특징",children:"핵심 특징"}),"\n",(0,r.jsx)(e.h3,{id:"1-zero-runtime-아키텍처",children:"1. Zero-runtime 아키텍처"}),"\n",(0,r.jsx)(e.p,{children:"빌드 타임에 모든 스타일을 정적 CSS로 변환하여 런타임 오버헤드를 제거합니다:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="개발 시 작성하는 코드"',children:"import { styled } from 'next-yak';\n\nconst Button = styled.button`\n  background: #007bff;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n  \n  &:hover {\n    background: #0056b3;\n  }\n`;\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="빌드 후 생성되는 코드"',children:'const Button = ({ children, ...props }) => (\n  <button className="button-abc123" {...props}>\n    {children}\n  </button>\n);\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",metastring:'title="생성되는 CSS 파일"',children:".button-abc123 {\n  background: #007bff;\n  color: white;\n  padding: 12px 24px;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n}\n\n.button-abc123:hover {\n  background: #0056b3;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-react-server-components-완벽-지원",children:"2. React Server Components 완벽 지원"}),"\n",(0,r.jsx)(e.p,{children:"Next.js 13+의 App Router와 Server Components에서 추가 설정 없이 작동합니다:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="app/components/ServerButton.tsx"',children:"import { styled } from 'next-yak';\n\nconst ServerButton = styled.button`\n  background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n  border: 0;\n  border-radius: 8px;\n  color: white;\n  padding: 12px 24px;\n  font-weight: 500;\n`;\n\nexport default function Page() {\n  return (\n    <ServerButton>\n      서버에서 렌더링되는 버튼\n    </ServerButton>\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-동적-스타일링-최적화",children:"3. 동적 스타일링 최적화"}),"\n",(0,r.jsx)(e.p,{children:"props를 통한 동적 스타일링도 빌드 타임에 최적화됩니다:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="동적 스타일링 예제"',children:"import { styled, css } from 'next-yak';\n\nconst Alert = styled.div<{\n  $variant: 'success' | 'warning' | 'error';\n  $size?: 'small' | 'large';\n}>`\n  padding: ${props => props.$size === 'small' ? '8px 12px' : '16px 24px'};\n  border-radius: 6px;\n  font-weight: 500;\n  \n  ${props => {\n    switch (props.$variant) {\n      case 'success':\n        return css`\n          background: #d4edda;\n          color: #155724;\n          border: 1px solid #c3e6cb;\n        `;\n      case 'warning':\n        return css`\n          background: #fff3cd;\n          color: #856404;\n          border: 1px solid #ffeaa7;\n        `;\n      case 'error':\n        return css`\n          background: #f8d7da;\n          color: #721c24;\n          border: 1px solid #f5c6cb;\n        `;\n    }\n  }}\n`;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"설치-및-설정",children:"설치 및 설정"}),"\n",(0,r.jsx)(e.h3,{id:"패키지-설치",children:"패키지 설치"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm install next-yak\n"})}),"\n",(0,r.jsx)(e.h3,{id:"nextjs-설정",children:"Next.js 설정"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"next.config.js"})," 파일에 next-yak 플러그인을 추가합니다:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",metastring:'title="next.config.js"',children:"const { withYak } = require('next-yak/withYak');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // 기존 설정들...\n};\n\nmodule.exports = withYak(nextConfig);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"typescript-설정",children:"TypeScript 설정"}),"\n",(0,r.jsx)(e.p,{children:"TypeScript 프로젝트에서는 타입 정의를 추가합니다:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "types": ["next-yak"]\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"실무-활용-패턴",children:"실무 활용 패턴"}),"\n",(0,r.jsx)(e.h3,{id:"1-컴포넌트-시스템-구축",children:"1. 컴포넌트 시스템 구축"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="components/Button.tsx"',children:"import { styled, css } from 'next-yak';\n\nconst sizes = {\n  small: css`\n    padding: 6px 12px;\n    font-size: 14px;\n    min-height: 32px;\n  `,\n  medium: css`\n    padding: 8px 16px;\n    font-size: 16px;\n    min-height: 40px;\n  `,\n  large: css`\n    padding: 12px 24px;\n    font-size: 18px;\n    min-height: 48px;\n  `,\n};\n\nconst variants = {\n  primary: css`\n    background: #007bff;\n    color: white;\n    &:hover:not(:disabled) { background: #0056b3; }\n  `,\n  outline: css`\n    background: transparent;\n    color: #007bff;\n    border: 1px solid #007bff;\n    &:hover:not(:disabled) {\n      background: #007bff;\n      color: white;\n    }\n  `,\n};\n\nexport const Button = styled.button<{\n  $size?: keyof typeof sizes;\n  $variant?: keyof typeof variants;\n}>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: 6px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  \n  ${props => sizes[props.$size || 'medium']}\n  ${props => variants[props.$variant || 'primary']}\n`;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-반응형-레이아웃",children:"2. 반응형 레이아웃"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="components/Grid.tsx"',children:"import { styled } from 'next-yak';\n\nexport const Grid = styled.div<{ $columns?: number }>`\n  display: grid;\n  gap: 20px;\n  padding: 20px;\n  \n  /* 모바일 */\n  grid-template-columns: 1fr;\n  \n  /* 태블릿 */\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 30px;\n  }\n  \n  /* 데스크톱 */\n  @media (min-width: 1024px) {\n    grid-template-columns: repeat(${props => props.$columns || 3}, 1fr);\n    gap: 40px;\n  }\n`;\n\nexport const GridItem = styled.div`\n  background: white;\n  border-radius: 12px;\n  padding: 24px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease;\n  \n  &:hover {\n    transform: translateY(-4px);\n  }\n`;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"성능-최적화",children:"성능 최적화"}),"\n",(0,r.jsx)(e.h3,{id:"빌드-설정-최적화",children:"빌드 설정 최적화"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",metastring:'title="next.config.js"',children:"const { withYak } = require('next-yak/withYak');\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst nextConfig = {\n  // 기존 설정들...\n};\n\nmodule.exports = withYak(nextConfig, {\n  cssOptimization: {\n    // 프로덕션에서만 최적화 활성화\n    minify: !isDev,\n    removeDuplicates: !isDev,\n    purgeUnused: !isDev,\n  },\n});\n"})}),"\n",(0,r.jsx)(e.h3,{id:"성능-측정-결과",children:"성능 측정 결과"}),"\n",(0,r.jsx)(e.p,{children:"실제 프로덕션 환경에서 측정한 성능 개선 결과:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"메트릭"}),(0,r.jsx)(e.th,{children:"styled-components"}),(0,r.jsx)(e.th,{children:"next-yak"}),(0,r.jsx)(e.th,{children:"개선율"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"JavaScript 번들 크기"}),(0,r.jsx)(e.td,{children:"245KB"}),(0,r.jsx)(e.td,{children:"198KB"}),(0,r.jsx)(e.td,{children:"19% 감소"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"First Contentful Paint"}),(0,r.jsx)(e.td,{children:"1.2s"}),(0,r.jsx)(e.td,{children:"0.9s"}),(0,r.jsx)(e.td,{children:"25% 향상"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Time to Interactive"}),(0,r.jsx)(e.td,{children:"2.8s"}),(0,r.jsx)(e.td,{children:"2.3s"}),(0,r.jsx)(e.td,{children:"18% 향상"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Cumulative Layout Shift"}),(0,r.jsx)(e.td,{children:"0.15"}),(0,r.jsx)(e.td,{children:"0.08"}),(0,r.jsx)(e.td,{children:"47% 향상"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"마이그레이션-가이드",children:"마이그레이션 가이드"}),"\n",(0,r.jsx)(e.h3,{id:"styled-components에서-마이그레이션",children:"styled-components에서 마이그레이션"}),"\n",(0,r.jsx)(e.p,{children:"기존 styled-components 코드를 next-yak로 마이그레이션하는 방법:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// Before (styled-components)\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  background: ${props => props.primary ? 'blue' : 'white'};\n  color: ${props => props.primary ? 'white' : 'blue'};\n`;\n\n// 사용법: <Button primary>Click me</Button>\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// After (next-yak)\nimport { styled } from 'next-yak';\n\nconst Button = styled.button<{ $primary?: boolean }>`\n  background: ${props => props.$primary ? 'blue' : 'white'};\n  color: ${props => props.$primary ? 'white' : 'blue'};\n`;\n\n// 사용법: <Button $primary>Click me</Button>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"주요 변경사항:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["props 이름에 ",(0,r.jsx)(e.code,{children:"$"})," 접두사 추가 (DOM에 전달되지 않는 props)"]}),"\n",(0,r.jsx)(e.li,{children:"import 구문 변경"}),"\n",(0,r.jsx)(e.li,{children:"기본 API는 동일하게 유지"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"점진적-마이그레이션-전략",children:"점진적 마이그레이션 전략"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:'title="혼합 사용 예제"',children:"// 기존 컴포넌트와 새 컴포넌트를 함께 사용\nimport StyledButton from './legacy/StyledButton'; // styled-components\nimport { Button } from './components/Button'; // next-yak\n\nexport default function MixedPage() {\n  return (\n    <div>\n      <StyledButton>기존 버튼</StyledButton>\n      <Button $variant=\"primary\">새 버튼</Button>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"트러블슈팅",children:"트러블슈팅"}),"\n",(0,r.jsx)(e.h3,{id:"자주-발생하는-문제",children:"자주 발생하는 문제"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"빌드 에러 해결"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# 캐시 클리어 후 재설치\nrm -rf .next node_modules package-lock.json\nnpm install\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"타입 에러 해결"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// 명시적 타입 정의로 해결\ninterface ButtonProps {\n  $variant: 'primary' | 'secondary';\n  $size: 'small' | 'medium' | 'large';\n}\n\nconst Button = styled.button<ButtonProps>`\n  /* 스타일 정의 */\n`;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"결론",children:"결론"}),"\n",(0,r.jsx)(e.p,{children:"next-yak는 Next.js 프로젝트에서 CSS-in-JS의 성능 문제를 근본적으로 해결하는 실용적인 솔루션입니다."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"핵심 이점:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"성능"}),": 런타임 오버헤드 완전 제거로 20% 이상 성능 향상"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"호환성"}),": React Server Components 완벽 지원"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"개발자 경험"}),": 기존 styled-components와 동일한 API"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"확장성"}),": 대규모 프로젝트에서도 안정적인 성능"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"특히 성능이 중요한 프로덕션 환경에서 기존 CSS-in-JS 라이브러리의 한계를 뛰어넘는 탁월한 대안입니다. 점진적 마이그레이션이 가능하므로 기존 프로젝트에서도 부담 없이 도입할 수 있습니다."}),"\n",(0,r.jsx)(e.h2,{id:"참고-자료",children:"참고 자료"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://yak.js.org",children:"next-yak 공식 문서"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/DigitecGalaxus/next-yak",children:"GitHub 저장소"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://nextjs.org/docs/app",children:"Next.js App Router 가이드"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://nextjs.org/docs/getting-started/react-essentials",children:"React Server Components 문서"})}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function l(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);