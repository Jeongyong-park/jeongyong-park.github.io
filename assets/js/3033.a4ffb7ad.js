"use strict";(self.webpackChunkjeongyong_park_github_io=self.webpackChunkjeongyong_park_github_io||[]).push([[3033],{3033:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var t=s(5604),r=s(4848),a=s(8453);const i={title:"Supabase 완벽 가이드: Firebase 대안으로 떠오르는 오픈소스 백엔드 플랫폼",date:"2025-05-30",authors:["jypark"],image:"/img/blog/supabase-guide.webp",tags:["supabase","firebase","postgresql","backend","database","realtime"],description:"Supabase는 PostgreSQL 기반의 오픈소스 백엔드 플랫폼으로, Firebase의 강력한 대안입니다. 실시간 데이터베이스, 인증, 스토리지, Edge Functions까지 한 번에 해결하는 방법을 소개합니다.",slug:"supabase-complete-guide-firebase-alternative",hide_table_of_contents:!1,hide_reading_time:!1},l=void 0,o={authorsImageUrls:[void 0]},d=[{value:"Supabase란 무엇인가?",id:"supabase란-무엇인가",level:2},{value:"핵심 개념과 철학",id:"핵심-개념과-철학",level:3},{value:"Supabase의 핵심 철학",id:"supabase의-핵심-철학",level:4},{value:"Firebase와의 차이점",id:"firebase와의-차이점",level:3},{value:"주요 기능 심화 분석",id:"주요-기능-심화-분석",level:2},{value:"1. PostgreSQL 기반 데이터베이스",id:"1-postgresql-기반-데이터베이스",level:3},{value:"PostgreSQL의 고급 기능 활용",id:"postgresql의-고급-기능-활용",level:4},{value:"Row Level Security (RLS)",id:"row-level-security-rls",level:4},{value:"2. 실시간 기능 (Realtime)",id:"2-실시간-기능-realtime",level:3},{value:"실시간 구독 구현",id:"실시간-구독-구현",level:4},{value:"3. 인증 시스템 (Auth)",id:"3-인증-시스템-auth",level:3},{value:"이메일/비밀번호 인증",id:"이메일비밀번호-인증",level:4},{value:"소셜 로그인",id:"소셜-로그인",level:4},{value:"인증 상태 관리",id:"인증-상태-관리",level:4},{value:"4. 스토리지 (Storage)",id:"4-스토리지-storage",level:3},{value:"파일 업로드 및 관리",id:"파일-업로드-및-관리",level:4},{value:"보안 및 권한 관리",id:"보안-및-권한-관리",level:4},{value:"5. Edge Functions",id:"5-edge-functions",level:3},{value:"Edge Function 예시",id:"edge-function-예시",level:4},{value:"클라이언트에서 Edge Function 호출",id:"클라이언트에서-edge-function-호출",level:4},{value:"실제 프로젝트 구현 예시",id:"실제-프로젝트-구현-예시",level:2},{value:"블로그 플랫폼 구축",id:"블로그-플랫폼-구축",level:3},{value:"데이터베이스 스키마 설계",id:"데이터베이스-스키마-설계",level:4},{value:"React 컴포넌트 구현",id:"react-컴포넌트-구현",level:4},{value:"성능 최적화 전략",id:"성능-최적화-전략",level:2},{value:"데이터베이스 최적화",id:"데이터베이스-최적화",level:3},{value:"쿼리 최적화",id:"쿼리-최적화",level:3},{value:"장점과 한계",id:"장점과-한계",level:2},{value:"Supabase의 주요 장점",id:"supabase의-주요-장점",level:3},{value:"1. <strong>개발 생산성</strong>",id:"1-개발-생산성",level:4},{value:"2. <strong>기술적 우수성</strong>",id:"2-기술적-우수성",level:4},{value:"3. <strong>개발자 경험</strong>",id:"3-개발자-경험",level:4},{value:"현재의 한계점",id:"현재의-한계점",level:3},{value:"1. <strong>복잡한 비즈니스 로직</strong>",id:"1-복잡한-비즈니스-로직",level:4},{value:"2. <strong>대용량 데이터 처리</strong>",id:"2-대용량-데이터-처리",level:4},{value:"3. <strong>특수한 요구사항</strong>",id:"3-특수한-요구사항",level:4},{value:"가격 정책과 확장성",id:"가격-정책과-확장성",level:2},{value:"요금 구조",id:"요금-구조",level:3},{value:"확장성 전략",id:"확장성-전략",level:3},{value:"실무 도입 가이드",id:"실무-도입-가이드",level:2},{value:"프로젝트 시작하기",id:"프로젝트-시작하기",level:3},{value:"1. 프로젝트 초기 설정",id:"1-프로젝트-초기-설정",level:4},{value:"2. Supabase 클라이언트 설정",id:"2-supabase-클라이언트-설정",level:4},{value:"마이그레이션 전략",id:"마이그레이션-전략",level:3},{value:"1. 데이터 마이그레이션",id:"1-데이터-마이그레이션",level:4},{value:"2. 점진적 마이그레이션",id:"2-점진적-마이그레이션",level:4},{value:"결론",id:"결론",level:2},{value:"주요 성과",id:"주요-성과",level:3},{value:"Supabase를 선택해야 하는 경우",id:"supabase를-선택해야-하는-경우",level:3},{value:"미래 전망",id:"미래-전망",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"supabase 완벽 가이드",src:s(4798).A+"",width:"1536",height:"1024"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TL;DR"}),": ",(0,r.jsx)(n.strong,{children:"Supabase"}),"는 PostgreSQL 기반의 오픈소스 백엔드 플랫폼으로, Firebase의 완벽한 대안입니다. ",(0,r.jsx)(n.strong,{children:"실시간 데이터베이스"}),", ",(0,r.jsx)(n.strong,{children:"인증 시스템"}),", ",(0,r.jsx)(n.strong,{children:"파일 스토리지"}),", ",(0,r.jsx)(n.strong,{children:"Edge Functions"}),"를 통합 제공하며, SQL의 강력함과 NoSQL의 편의성을 동시에 제공합니다."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:['Supabase는 "오픈소스 Firebase 대안"이라는 슬로건으로 시작해 현재 개발자들 사이에서 가장 주목받는 백엔드 서비스 중 하나로 자리잡았습니다. PostgreSQL을 기반으로 한 견고한 데이터베이스 인프라와 현대적인 개발자 경험을 제공하며, ',(0,r.jsx)(n.strong,{children:"2백만 명 이상의 개발자"}),"가 사용하고 있는 플랫폼입니다."]}),"\n",(0,r.jsxs)(n.p,{children:["특히 ",(0,r.jsx)(n.strong,{children:"관계형 데이터베이스의 강력함"}),"과 ",(0,r.jsx)(n.strong,{children:"NoSQL의 편의성"}),"을 동시에 제공하는 독특한 접근 방식으로, Firebase의 한계를 극복하면서도 더 나은 개발자 경험을 제공합니다."]}),"\n",(0,r.jsx)(n.h2,{id:"supabase란-무엇인가",children:"Supabase란 무엇인가?"}),"\n",(0,r.jsx)(n.h3,{id:"핵심-개념과-철학",children:"핵심 개념과 철학"}),"\n",(0,r.jsxs)(n.p,{children:['Supabase는 2020년에 창립된 회사로, **"The Open Source Firebase Alternative"**라는 명확한 비전을 가지고 시작되었습니다. 하지만 단순한 Firebase 클론이 아닌, ',(0,r.jsx)(n.strong,{children:"PostgreSQL의 강력함을 기반으로 한 더 나은 백엔드 솔루션"}),"을 제공하는 것이 목표입니다."]}),"\n",(0,r.jsx)(n.h4,{id:"supabase의-핵심-철학",children:"Supabase의 핵심 철학"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"오픈소스 우선"}),": 모든 핵심 기능이 오픈소스로 제공"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL 네이티브"}),": PostgreSQL의 모든 기능을 그대로 활용"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"개발자 경험 최우선"}),": 직관적이고 강력한 API 제공"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"확장성"}),": 스타트업부터 엔터프라이즈까지 모든 규모 지원"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"firebase와의-차이점",children:"Firebase와의 차이점"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"기능"}),(0,r.jsx)(n.th,{children:"Firebase"}),(0,r.jsx)(n.th,{children:"Supabase"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"데이터베이스"})}),(0,r.jsx)(n.td,{children:"NoSQL (Firestore)"}),(0,r.jsx)(n.td,{children:"PostgreSQL (관계형)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"쿼리 언어"})}),(0,r.jsx)(n.td,{children:"제한적 쿼리"}),(0,r.jsx)(n.td,{children:"완전한 SQL 지원"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"실시간 기능"})}),(0,r.jsx)(n.td,{children:"실시간 리스너"}),(0,r.jsx)(n.td,{children:"PostgreSQL 실시간 구독"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"인증"})}),(0,r.jsx)(n.td,{children:"Firebase Auth"}),(0,r.jsx)(n.td,{children:"자체 인증 + 외부 제공자"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"스토리지"})}),(0,r.jsx)(n.td,{children:"Cloud Storage"}),(0,r.jsx)(n.td,{children:"S3 호환 스토리지"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"함수"})}),(0,r.jsx)(n.td,{children:"Cloud Functions"}),(0,r.jsx)(n.td,{children:"Edge Functions (Deno)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"오픈소스"})}),(0,r.jsx)(n.td,{children:"부분적"}),(0,r.jsx)(n.td,{children:"완전한 오픈소스"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"벤더 락인"})}),(0,r.jsx)(n.td,{children:"높음"}),(0,r.jsx)(n.td,{children:"낮음 (PostgreSQL 표준)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"주요-기능-심화-분석",children:"주요 기능 심화 분석"}),"\n",(0,r.jsx)(n.h3,{id:"1-postgresql-기반-데이터베이스",children:"1. PostgreSQL 기반 데이터베이스"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase의 가장 큰 강점은 ",(0,r.jsx)(n.strong,{children:"PostgreSQL을 그대로 사용"}),"한다는 점입니다. 이는 단순히 데이터베이스를 제공하는 것을 넘어서, SQL의 모든 강력한 기능을 웹 애플리케이션에서 직접 활용할 수 있게 해줍니다."]}),"\n",(0,r.jsx)(n.h4,{id:"postgresql의-고급-기능-활용",children:"PostgreSQL의 고급 기능 활용"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",metastring:'title="복잡한 쿼리 예시" showLineNumbers',children:"-- 복잡한 조인과 집계 쿼리\nSELECT \n  u.name,\n  COUNT(p.id) as post_count,\n  AVG(p.likes) as avg_likes,\n  RANK() OVER (ORDER BY COUNT(p.id) DESC) as author_rank\nFROM users u\nLEFT JOIN posts p ON u.id = p.author_id\nWHERE u.created_at >= '2024-01-01'\nGROUP BY u.id, u.name\nHAVING COUNT(p.id) > 5\nORDER BY author_rank;\n\n-- JSON 필드 쿼리 (PostgreSQL의 강력한 JSON 지원)\nSELECT *\nFROM products\nWHERE metadata->>'category' = 'electronics'\n  AND (metadata->'specifications'->>'ram')::int >= 8;\n\n-- 전문 검색 (Full-text Search)\nSELECT *\nFROM articles\nWHERE to_tsvector('english', title || ' ' || content) \n      @@ plainto_tsquery('english', 'javascript performance optimization');\n"})}),"\n",(0,r.jsx)(n.h4,{id:"row-level-security-rls",children:"Row Level Security (RLS)"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase의 보안 모델은 PostgreSQL의 ",(0,r.jsx)(n.strong,{children:"Row Level Security"}),"를 기반으로 합니다. 이를 통해 데이터베이스 레벨에서 세밀한 권한 제어가 가능합니다."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",metastring:'title="RLS 정책 설정" showLineNumbers',children:'-- 사용자는 자신의 게시물만 볼 수 있도록 설정\nCREATE POLICY "Users can view own posts" ON posts\nFOR SELECT USING (auth.uid() = user_id);\n\n-- 관리자는 모든 게시물을 볼 수 있도록 설정\nCREATE POLICY "Admins can view all posts" ON posts\nFOR SELECT USING (\n  auth.jwt() ->> \'role\' = \'admin\'\n);\n\n-- 게시물 작성자만 수정 가능\nCREATE POLICY "Users can update own posts" ON posts\nFOR UPDATE USING (auth.uid() = user_id);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-실시간-기능-realtime",children:"2. 실시간 기능 (Realtime)"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase의 실시간 기능은 PostgreSQL의 ",(0,r.jsx)(n.strong,{children:"LISTEN/NOTIFY"})," 메커니즘을 웹소켓으로 확장한 혁신적인 구현입니다."]}),"\n",(0,r.jsx)(n.h4,{id:"실시간-구독-구현",children:"실시간 구독 구현"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/realtime.ts" showLineNumbers',children:"import { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!, \n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n\n// 특정 테이블의 모든 변경사항 실시간 구독\nconst subscription = supabase\n  .channel('public:posts')\n  .on('postgres_changes', {\n    event: '*', // INSERT, UPDATE, DELETE 모든 이벤트\n    schema: 'public',\n    table: 'posts'\n  }, (payload) => {\n    console.log('Change received!', payload)\n    // 실시간으로 UI 업데이트\n    handlePostChange(payload)\n  })\n  .subscribe()\n\n// 특정 조건에 맞는 데이터만 구독\nconst filteredSubscription = supabase\n  .channel('public:posts:author_id=eq.123')\n  .on('postgres_changes', {\n    event: 'INSERT',\n    schema: 'public',\n    table: 'posts',\n    filter: 'author_id=eq.123'\n  }, (payload) => {\n    console.log('New post from author 123:', payload.new)\n  })\n  .subscribe()\n\n// Presence 기능으로 온라인 사용자 추적\nconst presenceChannel = supabase.channel('online-users', {\n  config: {\n    presence: {\n      key: user.id,\n    },\n  },\n})\n\npresenceChannel\n  .on('presence', { event: 'sync' }, () => {\n    const state = presenceChannel.presenceState()\n    console.log('Online users:', Object.keys(state))\n  })\n  .on('presence', { event: 'join' }, ({ key, newPresences }) => {\n    console.log('User joined:', key, newPresences)\n  })\n  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {\n    console.log('User left:', key, leftPresences)\n  })\n  .subscribe()\n\n// 사용자 온라인 상태 전송\npresenceChannel.track({\n  user_id: user.id,\n  username: user.username,\n  last_seen: new Date().toISOString()\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-인증-시스템-auth",children:"3. 인증 시스템 (Auth)"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase Auth는 ",(0,r.jsx)(n.strong,{children:"JWT 기반의 현대적인 인증 시스템"}),"으로, 다양한 인증 방식을 지원합니다."]}),"\n",(0,r.jsx)(n.h4,{id:"이메일비밀번호-인증",children:"이메일/비밀번호 인증"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/auth.ts" showLineNumbers',children:"// 회원가입\nconst { data, error } = await supabase.auth.signUp({\n  email: 'user@example.com',\n  password: 'securepassword123',\n  options: {\n    data: {\n      first_name: 'John',\n      last_name: 'Doe',\n      age: 27,\n    }\n  }\n})\n\n// 로그인\nconst { data, error } = await supabase.auth.signInWithPassword({\n  email: 'user@example.com',\n  password: 'securepassword123'\n})\n\n// 로그아웃\nconst { error } = await supabase.auth.signOut()\n\n// 현재 사용자 정보 가져오기\nconst { data: { user } } = await supabase.auth.getUser()\n\n// 사용자 정보 업데이트\nconst { data, error } = await supabase.auth.updateUser({\n  data: { \n    first_name: 'Jane',\n    age: 28 \n  }\n})\n"})}),"\n",(0,r.jsx)(n.h4,{id:"소셜-로그인",children:"소셜 로그인"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="components/SocialLogin.tsx" showLineNumbers',children:"// Google 로그인\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'google',\n  options: {\n    redirectTo: 'https://yourapp.com/dashboard',\n    scopes: 'profile email'\n  }\n})\n\n// GitHub 로그인\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'github'\n})\n\n// 다중 제공자 지원\nconst providers = [\n  'google', 'github', 'apple', 'azure', 'bitbucket', \n  'discord', 'facebook', 'figma', 'gitlab', 'linkedin', \n  'notion', 'slack', 'spotify', 'twitch', 'twitter', 'workos'\n]\n"})}),"\n",(0,r.jsx)(n.h4,{id:"인증-상태-관리",children:"인증 상태 관리"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="hooks/useAuth.ts" showLineNumbers',children:"// React에서 인증 상태 관리\nimport { useEffect, useState } from 'react'\nimport type { User } from '@supabase/supabase-js'\n\nfunction useAuth() {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // 초기 세션 가져오기\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession()\n      setUser(session?.user ?? null)\n      setLoading(false)\n    }\n\n    getInitialSession()\n\n    // 인증 상태 변경 리스너\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, session) => {\n        setUser(session?.user ?? null)\n        setLoading(false)\n      }\n    )\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return { user, loading }\n}\n\n// 사용 예시\nfunction App() {\n  const { user, loading } = useAuth()\n\n  if (loading) return <div>Loading...</div>\n  if (!user) return <LoginForm />\n  return <Dashboard user={user} />\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-스토리지-storage",children:"4. 스토리지 (Storage)"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase Storage는 ",(0,r.jsx)(n.strong,{children:"S3 호환 객체 스토리지"}),"로, 파일 업로드, 다운로드, 변환 기능을 제공합니다."]}),"\n",(0,r.jsx)(n.h4,{id:"파일-업로드-및-관리",children:"파일 업로드 및 관리"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/storage.ts" showLineNumbers',children:"// 파일 업로드\nconst uploadFile = async (file: File) => {\n  const fileExt = file.name.split('.').pop()\n  const fileName = `${Date.now()}.${fileExt}`\n  const filePath = `uploads/${fileName}`\n\n  const { data, error } = await supabase.storage\n    .from('public-files')\n    .upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    })\n\n  if (error) {\n    console.error('Upload error:', error)\n    return null\n  }\n\n  // 업로드된 파일의 공개 URL 가져오기\n  const { data: { publicUrl } } = supabase.storage\n    .from('public-files')\n    .getPublicUrl(filePath)\n\n  return publicUrl\n}\n\n// 이미지 변환 및 최적화\nconst getOptimizedImageUrl = (path: string, options: {\n  width?: number\n  height?: number\n  quality?: number\n  format?: 'webp' | 'jpeg' | 'png'\n} = {}) => {\n  const { data } = supabase.storage\n    .from('images')\n    .getPublicUrl(path, {\n      transform: {\n        width: options.width || 800,\n        height: options.height || 600,\n        resize: 'cover',\n        format: options.format || 'webp',\n        quality: options.quality || 80\n      }\n    })\n\n  return data.publicUrl\n}\n\n// 파일 다운로드\nconst downloadFile = async (path: string) => {\n  const { data, error } = await supabase.storage\n    .from('private-files')\n    .download(path)\n\n  if (error) {\n    console.error('Download error:', error)\n    return null\n  }\n\n  // Blob을 URL로 변환\n  const url = URL.createObjectURL(data)\n  return url\n}\n\n// 파일 삭제\nconst deleteFile = async (path: string) => {\n  const { error } = await supabase.storage\n    .from('public-files')\n    .remove([path])\n\n  return !error\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"보안-및-권한-관리",children:"보안 및 권한 관리"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",metastring:'title="스토리지 RLS 정책" showLineNumbers',children:"-- 스토리지 RLS 정책 설정\n-- 사용자는 자신의 폴더에만 업로드 가능\nCREATE POLICY \"Users can upload to own folder\" ON storage.objects\nFOR INSERT WITH CHECK (\n  bucket_id = 'user-files' AND \n  auth.uid()::text = (storage.foldername(name))[1]\n);\n\n-- 사용자는 자신의 파일만 볼 수 있음\nCREATE POLICY \"Users can view own files\" ON storage.objects\nFOR SELECT USING (\n  bucket_id = 'user-files' AND \n  auth.uid()::text = (storage.foldername(name))[1]\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-edge-functions",children:"5. Edge Functions"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase Edge Functions는 ",(0,r.jsx)(n.strong,{children:"Deno 런타임"}),"을 기반으로 하는 서버리스 함수로, 전 세계 엣지 로케이션에서 실행됩니다."]}),"\n",(0,r.jsx)(n.h4,{id:"edge-function-예시",children:"Edge Function 예시"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="supabase/functions/send-email/index.ts" showLineNumbers',children:"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const { to, subject, html } = await req.json()\n    \n    // 이메일 발송 로직\n    const response = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${Deno.env.get('RESEND_API_KEY')}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        from: 'noreply@yourapp.com',\n        to,\n        subject,\n        html,\n      }),\n    })\n\n    const result = await response.json()\n\n    return new Response(\n      JSON.stringify(result),\n      { \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200 \n      }\n    )\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { \n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400 \n      }\n    )\n  }\n})\n"})}),"\n",(0,r.jsx)(n.h4,{id:"클라이언트에서-edge-function-호출",children:"클라이언트에서 Edge Function 호출"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/functions.ts" showLineNumbers',children:"// 클라이언트에서 Edge Function 호출\nconst sendEmail = async (emailData: {\n  to: string\n  subject: string\n  html: string\n}) => {\n  const { data, error } = await supabase.functions.invoke('send-email', {\n    body: emailData\n  })\n\n  if (error) {\n    console.error('Function error:', error)\n    return false\n  }\n\n  return data\n}\n\n// 사용 예시\nconst handleSendWelcomeEmail = async (userEmail: string, userName: string) => {\n  const result = await sendEmail({\n    to: userEmail,\n    subject: '환영합니다!',\n    html: `\n      <h1>안녕하세요, ${userName}님!</h1>\n      <p>회원가입을 축하드립니다.</p>\n    `\n  })\n\n  if (result) {\n    console.log('이메일이 성공적으로 발송되었습니다.')\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"실제-프로젝트-구현-예시",children:"실제 프로젝트 구현 예시"}),"\n",(0,r.jsx)(n.h3,{id:"블로그-플랫폼-구축",children:"블로그 플랫폼 구축"}),"\n",(0,r.jsx)(n.p,{children:"실제 프로젝트 예시로 Supabase를 활용한 블로그 플랫폼을 구축해보겠습니다."}),"\n",(0,r.jsx)(n.h4,{id:"데이터베이스-스키마-설계",children:"데이터베이스 스키마 설계"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",metastring:'title="database/schema.sql" showLineNumbers',children:'-- 사용자 프로필 테이블\nCREATE TABLE profiles (\n  id UUID REFERENCES auth.users(id) PRIMARY KEY,\n  username TEXT UNIQUE NOT NULL,\n  full_name TEXT,\n  bio TEXT,\n  avatar_url TEXT,\n  website TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- 블로그 포스트 테이블\nCREATE TABLE posts (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  slug TEXT UNIQUE NOT NULL,\n  content TEXT NOT NULL,\n  excerpt TEXT,\n  featured_image TEXT,\n  author_id UUID REFERENCES profiles(id) NOT NULL,\n  published BOOLEAN DEFAULT FALSE,\n  published_at TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- 댓글 테이블\nCREATE TABLE comments (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,\n  author_id UUID REFERENCES profiles(id),\n  content TEXT NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- 좋아요 테이블\nCREATE TABLE likes (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  UNIQUE(post_id, user_id)\n);\n\n-- RLS 정책 설정\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE posts ENABLE ROW LEVEL SECURITY;\nALTER TABLE comments ENABLE ROW LEVEL SECURITY;\nALTER TABLE likes ENABLE ROW LEVEL SECURITY;\n\n-- 프로필 정책\nCREATE POLICY "Public profiles are viewable by everyone" ON profiles\nFOR SELECT USING (true);\n\nCREATE POLICY "Users can update own profile" ON profiles\nFOR UPDATE USING (auth.uid() = id);\n\n-- 포스트 정책\nCREATE POLICY "Published posts are viewable by everyone" ON posts\nFOR SELECT USING (published = true);\n\nCREATE POLICY "Authors can view own posts" ON posts\nFOR SELECT USING (auth.uid() = author_id);\n\nCREATE POLICY "Authors can create posts" ON posts\nFOR INSERT WITH CHECK (auth.uid() = author_id);\n\nCREATE POLICY "Authors can update own posts" ON posts\nFOR UPDATE USING (auth.uid() = author_id);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"react-컴포넌트-구현",children:"React 컴포넌트 구현"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="types/database.types.ts" showLineNumbers',children:"// types/database.types.ts\nexport interface Profile {\n  id: string\n  username: string\n  full_name?: string\n  bio?: string\n  avatar_url?: string\n  website?: string\n}\n\nexport interface Post {\n  id: string\n  title: string\n  slug: string\n  content: string\n  excerpt?: string\n  featured_image?: string\n  author_id: string\n  published: boolean\n  published_at?: string\n  created_at: string\n  updated_at: string\n  profiles?: Profile\n  likes_count?: number\n  comments_count?: number\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="hooks/usePosts.ts" showLineNumbers',children:"// hooks/usePosts.ts\nimport { useState, useEffect } from 'react'\nimport { supabase } from '../lib/supabase'\n\nexport function usePosts() {\n  const [posts, setPosts] = useState<Post[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const { data, error } = await supabase\n        .from('posts')\n        .select(`\n          *,\n          profiles (username, full_name, avatar_url),\n          likes (count),\n          comments (count)\n        `)\n        .eq('published', true)\n        .order('published_at', { ascending: false })\n\n      if (error) {\n        console.error('Error fetching posts:', error)\n      } else {\n        setPosts(data || [])\n      }\n      setLoading(false)\n    }\n\n    fetchPosts()\n\n    // 실시간 구독\n    const subscription = supabase\n      .channel('public:posts')\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'posts',\n        filter: 'published=eq.true'\n      }, () => {\n        fetchPosts() // 변경사항 발생 시 다시 fetch\n      })\n      .subscribe()\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [])\n\n  return { posts, loading }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="components/PostCard.tsx" showLineNumbers',children:'// components/PostCard.tsx\ninterface PostCardProps {\n  post: Post\n}\n\nexport function PostCard({ post }: PostCardProps) {\n  const [liked, setLiked] = useState(false)\n  const [likesCount, setLikesCount] = useState(post.likes_count || 0)\n\n  const handleLike = async () => {\n    const { data: { user } } = await supabase.auth.getUser()\n    \n    if (!user) return\n\n    if (liked) {\n      // 좋아요 취소\n      await supabase\n        .from(\'likes\')\n        .delete()\n        .eq(\'post_id\', post.id)\n        .eq(\'user_id\', user.id)\n      \n      setLiked(false)\n      setLikesCount(prev => prev - 1)\n    } else {\n      // 좋아요 추가\n      await supabase\n        .from(\'likes\')\n        .insert({ post_id: post.id, user_id: user.id })\n      \n      setLiked(true)\n      setLikesCount(prev => prev + 1)\n    }\n  }\n\n  return (\n    <article className="bg-white rounded-lg shadow-md overflow-hidden">\n      {post.featured_image && (\n        <img \n          src={post.featured_image} \n          alt={post.title}\n          className="w-full h-48 object-cover"\n        />\n      )}\n      \n      <div className="p-6">\n        <h2 className="text-xl font-bold mb-2">\n          <Link href={`/posts/${post.slug}`}>\n            {post.title}\n          </Link>\n        </h2>\n        \n        {post.excerpt && (\n          <p className="text-gray-600 mb-4">{post.excerpt}</p>\n        )}\n        \n        <div className="flex items-center justify-between">\n          <div className="flex items-center space-x-2">\n            <img \n              src={post.profiles?.avatar_url || \'/default-avatar.png\'}\n              alt={post.profiles?.username}\n              className="w-8 h-8 rounded-full"\n            />\n            <span className="text-sm text-gray-700">\n              {post.profiles?.full_name || post.profiles?.username}\n            </span>\n          </div>\n          \n          <button \n            onClick={handleLike}\n            className={`flex items-center space-x-1 ${\n              liked ? \'text-red-500\' : \'text-gray-500\'\n            }`}\n          >\n            <HeartIcon className="w-5 h-5" fill={liked ? \'currentColor\' : \'none\'} />\n            <span>{likesCount}</span>\n          </button>\n        </div>\n      </div>\n    </article>\n  )\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"성능-최적화-전략",children:"성능 최적화 전략"}),"\n",(0,r.jsx)(n.h3,{id:"데이터베이스-최적화",children:"데이터베이스 최적화"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",metastring:'title="database/indexes.sql" showLineNumbers',children:"-- 성능 최적화를 위한 인덱스 생성\nCREATE INDEX idx_posts_author_published ON posts(author_id, published);\nCREATE INDEX idx_posts_published_at ON posts(published_at DESC) WHERE published = true;\nCREATE INDEX idx_posts_slug ON posts(slug);\nCREATE INDEX idx_comments_post_id ON comments(post_id);\nCREATE INDEX idx_likes_post_user ON likes(post_id, user_id);\n\n-- 전문 검색을 위한 인덱스\nCREATE INDEX idx_posts_search ON posts USING gin(to_tsvector('english', title || ' ' || content));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"쿼리-최적화",children:"쿼리 최적화"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/optimized-queries.ts" showLineNumbers',children:"// 페이지네이션과 함께 최적화된 쿼리\nconst getPostsWithPagination = async (page: number = 1, limit: number = 10) => {\n  const offset = (page - 1) * limit\n\n  const { data, error, count } = await supabase\n    .from('posts')\n    .select(`\n      id, title, excerpt, published_at, slug,\n      profiles!inner(username, avatar_url)\n    `, { count: 'exact' })\n    .eq('published', true)\n    .order('published_at', { ascending: false })\n    .range(offset, offset + limit - 1)\n\n  return {\n    posts: data || [],\n    totalCount: count || 0,\n    totalPages: Math.ceil((count || 0) / limit),\n    currentPage: page\n  }\n}\n\n// 캐싱을 활용한 최적화\nimport { unstable_cache } from 'next/cache'\n\nconst getCachedPosts = unstable_cache(\n  async () => {\n    const { data } = await supabase\n      .from('posts')\n      .select('*')\n      .eq('published', true)\n      .order('published_at', { ascending: false })\n      .limit(10)\n    \n    return data\n  },\n  ['featured-posts'],\n  { \n    revalidate: 300, // 5분 캐시\n    tags: ['posts'] \n  }\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"장점과-한계",children:"장점과 한계"}),"\n",(0,r.jsx)(n.h3,{id:"supabase의-주요-장점",children:"Supabase의 주요 장점"}),"\n",(0,r.jsxs)(n.h4,{id:"1-개발-생산성",children:["1. ",(0,r.jsx)(n.strong,{children:"개발 생산성"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"즉시 사용 가능한 백엔드"}),": 복잡한 서버 설정 없이 바로 개발 시작"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"통합된 도구"}),": 데이터베이스, 인증, 스토리지, 함수를 한 곳에서 관리"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"직관적인 대시보드"}),": 비개발자도 쉽게 이해할 수 있는 관리 인터페이스"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-기술적-우수성",children:["2. ",(0,r.jsx)(n.strong,{children:"기술적 우수성"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL의 강력함"}),": 복잡한 쿼리, 트랜잭션, ACID 보장"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"실시간 성능"}),": WebSocket 기반의 빠른 실시간 업데이트"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"확장성"}),": 수평적, 수직적 확장 모두 지원"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-개발자-경험",children:["3. ",(0,r.jsx)(n.strong,{children:"개발자 경험"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"타입 안전성"}),": TypeScript 완벽 지원으로 컴파일 타임 에러 방지"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"자동 API 생성"}),": 데이터베이스 스키마 기반 REST API 자동 생성"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"풍부한 생태계"}),": React, Vue, Svelte, Flutter 등 다양한 프레임워크 지원"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"현재의-한계점",children:"현재의 한계점"}),"\n",(0,r.jsx)(n.admonition,{title:"고려해야 할 제한사항",type:"warning",children:(0,r.jsx)(n.p,{children:"Supabase는 강력한 플랫폼이지만, 특정 상황에서는 제약이 있을 수 있습니다."})}),"\n",(0,r.jsxs)(n.h4,{id:"1-복잡한-비즈니스-로직",children:["1. ",(0,r.jsx)(n.strong,{children:"복잡한 비즈니스 로직"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Edge Functions의 기능이 AWS Lambda나 Google Cloud Functions 대비 제한적"}),"\n",(0,r.jsx)(n.li,{children:"복잡한 백엔드 로직은 여전히 별도 서버가 필요할 수 있음"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-대용량-데이터-처리",children:["2. ",(0,r.jsx)(n.strong,{children:"대용량 데이터 처리"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"매우 큰 규모의 데이터 분석이나 ETL 작업에는 전문 도구가 더 적합"}),"\n",(0,r.jsx)(n.li,{children:"복잡한 데이터 파이프라인 구축에는 추가 도구 필요"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-특수한-요구사항",children:["3. ",(0,r.jsx)(n.strong,{children:"특수한 요구사항"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"특정 규정 준수나 보안 요구사항이 있는 엔터프라이즈 환경"}),"\n",(0,r.jsx)(n.li,{children:"기존 레거시 시스템과의 복잡한 통합"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"가격-정책과-확장성",children:"가격 정책과 확장성"}),"\n",(0,r.jsx)(n.h3,{id:"요금-구조",children:"요금 구조"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase는 ",(0,r.jsx)(n.strong,{children:"사용량 기반 요금 정책"}),"을 채택하여 스타트업부터 대기업까지 합리적인 비용으로 이용할 수 있습니다."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"플랜"}),(0,r.jsx)(n.th,{children:"월 요금"}),(0,r.jsx)(n.th,{children:"주요 특징"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Free"})}),(0,r.jsx)(n.td,{children:"$0"}),(0,r.jsxs)(n.td,{children:["• 2개 프로젝트",(0,r.jsx)("br",{}),"• 500MB 데이터베이스",(0,r.jsx)("br",{}),"• 1GB 스토리지",(0,r.jsx)("br",{}),"• 50MB Edge Functions"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Pro"})}),(0,r.jsx)(n.td,{children:"$25"}),(0,r.jsxs)(n.td,{children:["• 무제한 프로젝트",(0,r.jsx)("br",{}),"• 8GB 데이터베이스",(0,r.jsx)("br",{}),"• 100GB 스토리지",(0,r.jsx)("br",{}),"• 2GB Edge Functions"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Team"})}),(0,r.jsx)(n.td,{children:"$599"}),(0,r.jsxs)(n.td,{children:["• 팀 협업 기능",(0,r.jsx)("br",{}),"• 우선 지원",(0,r.jsx)("br",{}),"• 고급 보안 기능"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Enterprise"})}),(0,r.jsx)(n.td,{children:"별도 문의"}),(0,r.jsxs)(n.td,{children:["• 전용 지원",(0,r.jsx)("br",{}),"• SLA 보장",(0,r.jsx)("br",{}),"• 커스텀 보안 정책"]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"확장성-전략",children:"확장성 전략"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/performance.ts" showLineNumbers',children:"// 성능 최적화를 위한 실무 팁\n\n// 1. 연결 풀링 최적화\nconst supabase = createClient(supabaseUrl, supabaseKey, {\n  db: {\n    schema: 'public',\n  },\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  },\n  realtime: {\n    params: {\n      eventsPerSecond: 10\n    }\n  }\n})\n\n// 2. 배치 처리 최적화\nconst batchInsertPosts = async (posts: Post[]) => {\n  const batchSize = 100\n  const results = []\n\n  for (let i = 0; i < posts.length; i += batchSize) {\n    const batch = posts.slice(i, i + batchSize)\n    const { data, error } = await supabase\n      .from('posts')\n      .insert(batch)\n    \n    if (error) {\n      console.error(`Batch ${i / batchSize + 1} failed:`, error)\n    } else {\n      results.push(...(data || []))\n    }\n  }\n\n  return results\n}\n\n// 3. 읽기 전용 복제본 활용\nconst readOnlySupabase = createClient(\n  process.env.SUPABASE_READ_REPLICA_URL!,\n  process.env.SUPABASE_ANON_KEY!\n)\n\nconst getAnalyticsData = async () => {\n  // 읽기 전용 복제본에서 분석 쿼리 실행\n  return await readOnlySupabase\n    .from('posts')\n    .select('created_at, author_id')\n    .gte('created_at', '2024-01-01')\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"실무-도입-가이드",children:"실무 도입 가이드"}),"\n",(0,r.jsx)(n.h3,{id:"프로젝트-시작하기",children:"프로젝트 시작하기"}),"\n",(0,r.jsx)(n.h4,{id:"1-프로젝트-초기-설정",children:"1. 프로젝트 초기 설정"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="프로젝트 설정" showLineNumbers',children:"# Next.js 프로젝트 생성\nnpx create-next-app@latest my-supabase-app --typescript --tailwind --app\n\n# Supabase 클라이언트 설치\nnpm install @supabase/supabase-js\n\n# 개발 도구 설치\nnpm install -D @supabase/cli\n\n# 환경변수 설정 (.env.local)\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-supabase-클라이언트-설정",children:"2. Supabase 클라이언트 설정"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/supabase.ts" showLineNumbers',children:"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\n// 서버사이드용 클라이언트 (관리자 권한)\nexport const supabaseAdmin = createClient(\n  supabaseUrl,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"마이그레이션-전략",children:"마이그레이션 전략"}),"\n",(0,r.jsx)(n.p,{children:"기존 Firebase 프로젝트에서 Supabase로 마이그레이션하는 경우의 전략입니다."}),"\n",(0,r.jsx)(n.h4,{id:"1-데이터-마이그레이션",children:"1. 데이터 마이그레이션"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="scripts/migrate-firebase.ts" showLineNumbers',children:"// Firebase에서 Supabase로 데이터 마이그레이션\nimport { initializeApp } from 'firebase/app'\nimport { getFirestore, collection, getDocs } from 'firebase/firestore'\nimport { supabaseAdmin } from './lib/supabase'\n\nconst migrateFirestoreToSupabase = async () => {\n  // Firebase 초기화\n  const firebaseApp = initializeApp(firebaseConfig)\n  const db = getFirestore(firebaseApp)\n\n  // Firestore 데이터 가져오기\n  const postsSnapshot = await getDocs(collection(db, 'posts'))\n  const posts = postsSnapshot.docs.map(doc => ({\n    id: doc.id,\n    ...doc.data()\n  }))\n\n  // Supabase에 데이터 삽입\n  for (const post of posts) {\n    const { error } = await supabaseAdmin\n      .from('posts')\n      .insert({\n        title: post.title,\n        content: post.content,\n        author_id: post.authorId,\n        created_at: post.createdAt.toDate().toISOString()\n      })\n\n    if (error) {\n      console.error('Migration error:', error)\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-점진적-마이그레이션",children:"2. 점진적 마이그레이션"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="lib/hybrid-data.ts" showLineNumbers',children:"// 하이브리드 접근: Firebase와 Supabase 동시 사용\nconst useHybridData = () => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      // 우선 Supabase에서 시도\n      let { data: supabaseData, error } = await supabase\n        .from('posts')\n        .select('*')\n\n      if (error || !supabaseData.length) {\n        // Supabase에 데이터가 없으면 Firebase에서 가져오기\n        const firebaseData = await getFirebaseData()\n        setData(firebaseData)\n      } else {\n        setData(supabaseData)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  return data\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"결론",children:"결론"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase는 ",(0,r.jsx)(n.strong,{children:"PostgreSQL의 강력함과 NoSQL의 편의성"}),"을 결합한 혁신적인 백엔드 플랫폼으로, 현대 웹 애플리케이션 개발에 새로운 패러다임을 제시하고 있습니다. 특히 ",(0,r.jsx)(n.strong,{children:"오픈소스 철학"}),"을 바탕으로 한 투명성과 ",(0,r.jsx)(n.strong,{children:"개발자 중심의 경험"}),"은 Firebase의 훌륭한 대안이 되고 있습니다."]}),"\n",(0,r.jsx)(n.h3,{id:"주요-성과",children:"주요 성과"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"2백만 명 이상의 개발자"})," 커뮤니티 형성"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fortune 500 기업들의 도입"})," 증가"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"지속적인 기능 업데이트"}),"와 성능 개선"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"강력한 생태계"}),"와 써드파티 통합"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"supabase를-선택해야-하는-경우",children:"Supabase를 선택해야 하는 경우"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"관계형 데이터베이스의 강력함"}),"이 필요한 프로젝트"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"빠른 프로토타이핑"}),"과 MVP 개발"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"오픈소스 솔루션"}),"을 선호하는 조직"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"벤더 락인을 피하고 싶은"})," 경우"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL 숙련도가 있는"})," 개발팀"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"미래-전망",children:"미래 전망"}),"\n",(0,r.jsxs)(n.p,{children:["Supabase는 단순한 백엔드 서비스를 넘어서 ",(0,r.jsx)(n.strong,{children:"개발자 플랫폼"}),"으로 진화하고 있습니다. AI 기능 통합, 더 강력한 Edge Computing, 그리고 기업용 기능 강화를 통해 앞으로도 지속적인 성장이 예상됩니다."]}),"\n",(0,r.jsxs)(n.p,{children:["모든 프로젝트에 완벽한 솔루션은 없지만, Supabase는 ",(0,r.jsx)(n.strong,{children:"현대적인 웹 애플리케이션 개발"}),"에 있어서 가장 균형 잡힌 선택지 중 하나입니다. 특히 개발 속도와 확장성, 그리고 개발자 경험을 모두 고려했을 때 매우 경쟁력 있는 플랫폼입니다."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"참고 자료"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://supabase.com/docs",children:"Supabase 공식 문서"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/",children:"PostgreSQL 공식 문서"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/supabase/supabase",children:"Supabase GitHub Repository"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://supabase.com/alternatives/supabase-vs-firebase",children:"Supabase vs Firebase 비교 분석"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4798:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/supabase-guide-eea5bf9362e1af4d12fc1ce257ad378e.webp"},5604:e=>{e.exports=JSON.parse('{"permalink":"/blog/supabase-complete-guide-firebase-alternative","source":"@site/blog/2025-05-30-post/index.md","title":"Supabase 완벽 가이드: Firebase 대안으로 떠오르는 오픈소스 백엔드 플랫폼","description":"Supabase는 PostgreSQL 기반의 오픈소스 백엔드 플랫폼으로, Firebase의 강력한 대안입니다. 실시간 데이터베이스, 인증, 스토리지, Edge Functions까지 한 번에 해결하는 방법을 소개합니다.","date":"2025-05-30T00:00:00.000Z","tags":[{"inline":true,"label":"supabase","permalink":"/blog/tags/supabase"},{"inline":true,"label":"firebase","permalink":"/blog/tags/firebase"},{"inline":true,"label":"postgresql","permalink":"/blog/tags/postgresql"},{"inline":true,"label":"backend","permalink":"/blog/tags/backend"},{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"realtime","permalink":"/blog/tags/realtime"}],"readingTime":15.01,"hasTruncateMarker":true,"authors":[{"name":"Jeongyong Park","title":"쌍팔년생 개발자","url":"https://github.com/jeongyong-park","email":"kladess@gmail.com","socials":{"x":"https://x.com/chisquare88","github":"https://github.com/jeongyong-park"},"imageURL":"/img/avatar.webp","key":"jypark","page":null}],"frontMatter":{"title":"Supabase 완벽 가이드: Firebase 대안으로 떠오르는 오픈소스 백엔드 플랫폼","date":"2025-05-30","authors":["jypark"],"image":"/img/blog/supabase-guide.webp","tags":["supabase","firebase","postgresql","backend","database","realtime"],"description":"Supabase는 PostgreSQL 기반의 오픈소스 백엔드 플랫폼으로, Firebase의 강력한 대안입니다. 실시간 데이터베이스, 인증, 스토리지, Edge Functions까지 한 번에 해결하는 방법을 소개합니다.","slug":"supabase-complete-guide-firebase-alternative","hide_table_of_contents":false,"hide_reading_time":false},"unlisted":false,"prevItem":{"title":"C#에서 Thread와 Parallel.ForEach 안전하게 중단하는 방법","permalink":"/blog/csharp-thread-parallel-foreach-safe-cancellation"},"nextItem":{"title":"Tailwind CSS v4.0 & v4.1 완전 분석: 성능 혁신과 실전 유틸리티","permalink":"/blog/tailwind-css-v4-complete-guide"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);